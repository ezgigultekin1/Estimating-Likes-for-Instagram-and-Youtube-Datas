import numpy as np
import pandas as pd
from pymongo import MongoClient
import matplotlib.pyplot as plt
import seaborn as sns
from bson.objectid import ObjectId

# MongoDB Connection Detailstüm kod
# Veri bağlantı detayları (örnek)
CONNECTION_STRING = 'mongodb://wearisma-read-only:'
DB_NAME = 'heroku_62fv85nh'

class SocialMediaDataAnalyzer:
    def __init__(self, connection_string, db_name):
        self.client = MongoClient(connection_string)
        self.db = self.client[db_name]

    def fetch_data(self, collection_name, query, limit=None):
        collection = self.db[collection_name]
        data = collection.find(query)
        if limit:
            data = data.limit(limit)
        return pd.DataFrame(list(data))

    def clean_data(self, df):
        # Handle the 'metadata' and convert 'published_at' to datetime
        if 'metadata' in df.columns:
            df['published_at'] = df['metadata'].apply(
                lambda x: x.get('published_at') if isinstance(x, dict) else np.nan)
            df.drop(columns=['metadata'], inplace=True)

        # Convert datetimes to UNIX timestamp
        datetime_cols = df.select_dtypes(include=['datetime64']).columns
        for col in datetime_cols:
            df[col] = pd.to_datetime(df[col]).astype(np.int64) // 10 ** 9

        # Drop non-numeric columns (including ObjectId columns)
        df_numeric = df.select_dtypes(include=[np.number])
        df_numeric.drop(columns=['_id', 'user_id', 'instagram_user_id', 'youtube_channel_id'], errors='ignore', inplace=True)

        # Drop columns with all same values (like zeros)
        for col in df_numeric.columns:
            if df_numeric[col].nunique() <= 1:
                df_numeric.drop(columns=[col], inplace=True)

        return df_numeric

    def plot_likes_distribution(self, df, platform, like_field):
        plt.figure(figsize=(10, 6))
        sns.histplot(df[like_field], bins=30, kde=True)
        plt.title(f'{platform.capitalize()} Likes Distribution')
        plt.xlabel('Likes Count')
        plt.ylabel('Frequency')
        plt.xscale('log')
        plt.show()

    def plot_correlation_matrix(self, df, title):
        corr_matrix = df.corr()
        plt.figure(figsize=(12, 10))
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
        plt.title(title)
        plt.show()

# Main execution
if __name__ == "__main__":
    analyzer = SocialMediaDataAnalyzer(CONNECTION_STRING, DB_NAME)

    # Instagram Data
    df_instagram = analyzer.fetch_data('instagram_media', {'has_hidden_likes': False}, 500)
    df_instagram_clean = analyzer.clean_data(df_instagram)
    analyzer.plot_likes_distribution(df_instagram_clean, 'Instagram', 'likes_count')
    analyzer.plot_correlation_matrix(df_instagram_clean, 'Instagram Correlation Matrix')

    # YouTube Data
    df_youtube = analyzer.fetch_data('youtube_videos', {'like_count': {'$gt': 0}}, 500)
    df_youtube_clean = analyzer.clean_data(df_youtube)
    analyzer.plot_likes_distribution(df_youtube_clean, 'YouTube', 'like_count')
    analyzer.plot_correlation_matrix(df_youtube_clean, 'YouTube Correlation Matrix')
